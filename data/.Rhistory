Open <- data$Open
Low <- data$Low
Close <- data$Close
data$gk <- 0.5*(log(High/Open) - log(Low/Open))^2 - (2*log(2)-1)*log(Close/Open)^2
y <- data$gk*100
#### grafici di gk e abs ret
par(mfrow = c(2,1), lwd = 1)
plot(x = time, y = y, type = "l", main = "Garman-Klass volatility measure", ylab = "")
plot(x = time, y = sqrt(2/pi)*abs(yret), type = "l", main = "Absolute returns", ylab = "")
# sqrt(2/pi) è dato dall'ipotesi che z si distribuisca come una N(0,1), è necessario a trovare
# il valore atteso di |z|
#### Set naive
naive.vol <- sd(yret)
naive.var <- naive.vol^2
#### Error measures
cat("---------------------------------------------------------------------",
"\nError measures\n")
ErrorMeas <- data.frame(
measure = c("Volatility", "Volatility", "Volatility", "Volatility",
"Variance", "Variance", "Variance", "Variance"),
model = c("GARCH", "IGARCH", "GJR-GARCH con VT", "T-GARCH",
"GARCH", "IGARCH", "GJR-GARCH con VT", "T-GARCH"),
rbind(
.ErrorMeasures(y = y,   fit = fit1@fit$sigma,   naive = naive.vol),
.ErrorMeasures(y = y,   fit = fit3@fit$sigma,   naive = naive.vol),
.ErrorMeasures(y = y,   fit = fit4@fit$sigma,   naive = naive.vol),
.ErrorMeasures(y = y,   fit = fit5@fit$sigma,   naive = naive.vol),
.ErrorMeasures(y = y^2, fit = fit1@fit$sigma^2, naive = naive.var),
.ErrorMeasures(y = y^2, fit = fit3@fit$sigma^2, naive = naive.var),
.ErrorMeasures(y = y^2, fit = fit4@fit$sigma^2, naive = naive.var),
.ErrorMeasures(y = y^2, fit = fit5@fit$sigma^2, naive = naive.var) ) )
print( ErrorMeas )
#### Mincer-Zarnowitz forecasting diagnostics
cat("---------------------------------------------------------------------",
"\nMincer-Zarnowitz\n" )
x1 <- .MincerZarnowitz(y = y, fit = fit1@fit$sigma, msg = "GARCH\n")
x1 <- .MincerZarnowitz(y = y, fit = fit4@fit$sigma, msg = "GJR-GARCH con VT\n")
x1 <- .MincerZarnowitz(y = y, fit = fit3@fit$sigma, msg = "IGARCH\n")
x1 <- .MincerZarnowitz(y = y, fit = fit5@fit$sigma, msg = "T-GARCH\n")
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=(abs(data$gk[1401:1886]))*1000, type="l",
ylab="gk*1000", xlab="", main="confronto previsioni ex-post \n con i valori di Garman-Klaus")
lines(x = time[1401:1886], y = forc2@forecast$sigmaFor*sqrt(2/pi), col="red")
## Examine forc1@forecast
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=(abs(data$gk[1401:1886]))*1000, type="l",
ylab="gk*1000", xlab="", main="confronto previsioni ex-post \n con i valori di Garman-Klaus")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor*sqrt(2/pi), col="red")
#### Settings
H <- 10
#### Arguments to pay attention
## data
## out.sample
## n.roll
#### Rule:
## last t in info = NROW(data) - out.sample
#### 1) ex-post, h = 1:H at t = 1400 -> date 1400 => 2021-07-26
spec1x <- getspec(fit5)
setfixed(spec1x) <- as.list(coef(fit5))
forc1a <- ugarchforecast(fitORspec = spec1x, n.ahead = H,
data = yret[1:1400])
forc1 <- ugarchforecast(fitORspec = spec1x, n.ahead = H,
data = yret, out.sample = NROW(yret)-1400, n.roll = 0)
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=(abs(data$gk[1401:1886]))*1000, type="l",
ylab="gk*1000", xlab="", main="confronto previsioni ex-post \n con i valori di Garman-Klaus")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor*sqrt(2/pi), col="red")
length(forc1@forecast$sigmaFor*sqrt(2/pi))
1886-1401
H <- 485
#### Arguments to pay attention
## data
## out.sample
## n.roll
#### Rule:
## last t in info = NROW(data) - out.sample
#### 1) ex-post, h = 1:H at t = 1400 -> date 1400 => 2021-07-26
spec1x <- getspec(fit5)
setfixed(spec1x) <- as.list(coef(fit5))
forc1a <- ugarchforecast(fitORspec = spec1x, n.ahead = H,
data = yret[1:1400])
forc1 <- ugarchforecast(fitORspec = spec1x, n.ahead = H,
data = yret, out.sample = NROW(yret)-1400, n.roll = 0)
## Examine forc1@forecast
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=(abs(data$gk[1401:1886]))*1000, type="l",
ylab="gk*1000", xlab="", main="confronto previsioni ex-post \n con i valori di Garman-Klaus")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor*sqrt(2/pi), col="red")
length(time[1401:1886])
length(forc1@forecast$sigmaFor*sqrt(2/pi))
H <- 486
#### Arguments to pay attention
## data
## out.sample
## n.roll
#### Rule:
## last t in info = NROW(data) - out.sample
#### 1) ex-post, h = 1:H at t = 1400 -> date 1400 => 2021-07-26
spec1x <- getspec(fit5)
setfixed(spec1x) <- as.list(coef(fit5))
forc1a <- ugarchforecast(fitORspec = spec1x, n.ahead = H,
data = yret[1:1400])
forc1 <- ugarchforecast(fitORspec = spec1x, n.ahead = H,
data = yret, out.sample = NROW(yret)-1400, n.roll = 0)
## Examine forc1@forecast
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=(abs(data$gk[1401:1886]))*1000, type="l",
ylab="gk*1000", xlab="", main="confronto previsioni ex-post \n con i valori di Garman-Klaus")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor*sqrt(2/pi), col="red")
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=(abs(data$gk[1401:1886]))*1000, type="l",
ylab="gk*1000", xlab="", main="confronto previsioni ex-post \n con i valori di Garman-Klaus")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=sqrt(2/pi)*abs(yret), type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con i valori di Garman-Klaus")
## Examine forc1@forecast
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=sqrt(2/pi)*abs(yret)[1401:1886], type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con i valori di Garman-Klaus")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
sqrt(-2)
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=sqrt(1/3)*abs(yret)[1401:1886], type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con i valori di Garman-Klaus")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=sqrt(1/3)*abs(yret)[1401:1886], type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con il valore atteso di |z|")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=abs(yret)[1401:1886], type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con il valore atteso di |z|")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=(yret^2)[1401:1886], type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con il valore atteso di |z|")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
mean((yret^2)[1401:1886])
mean(abs(yret)[1401:1886])
mean(forc1@forecast$sigmaFor)
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=mean(abs(yret)[1401:1886]), type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con il valore atteso di |z|")
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=abs(yret)[1401:1886], type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con il valore atteso di |z|")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=abs(yret)[1401:1886], type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con il valore atteso di |z|")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
#### 2) ex-post, h = 1:H at t = 1400
forc2 <- ugarchforecast(fitORspec = spec1x, n.ahead = H,
data = yret, out.sample = NROW(yret) - 1400, n.roll = 3)
## Examine forc2@forecast (n.roll)
lines(x = time[1401:1886], y = forc2@forecast$sigmaFor, col="blue")
length(forc2@forecast$sigmaFor)
forc2@forecast
class(forc2@forecast)
forc2@forecast[1]
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=abs(yret)[1401:1886], type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con il valore atteso di |z|")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
#### 2) ex-post, h = 1:H at t = 1400
forc2 <- ugarchforecast(fitORspec = spec1x, n.ahead = H,
data = yret, out.sample = NROW(yret) - 1400, n.roll = 3)
## Examine forc2@forecast (n.roll)
lines(x = time[1401:1886], y = forc2@forecast$sigmaFor[1], col="blue")
length(forc2@forecast[1])
length(forc2@forecast$sigmaFor)
class(forc2@forecast$sigmaFor)
class(forc2@forecast$sigmaFor[1])
forc2@forecast$sigmaFor[1]
forc2@forecast$sigmaFor
t <- rowSums(forc2@forecast$sigmaFor)
t
t <- rowMeans(forc2@forecast$sigmaFor)
t
t(t)
t
length(t)
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=abs(yret)[1401:1886], type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con il valore atteso di |z|")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
#### 2) ex-post, h = 1:H at t = 1400
forc2 <- ugarchforecast(fitORspec = spec1x, n.ahead = H,
data = yret, out.sample = NROW(yret) - 1400, n.roll = 3)
## Examine forc2@forecast (n.roll)
lines(x = time[1401:1886], y = rowMeans(forc2@forecast$sigmaFor), col="blue")
## Examine forc1@forecast
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=abs(yret)[1401:1886], type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con il valore atteso di |z|")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
#### 2) ex-post, h = 1:H at t = 1400
forc2 <- ugarchforecast(fitORspec = spec1x, n.ahead = H,
data = yret, out.sample = NROW(yret) - 1400, n.roll = 3)
## Examine forc2@forecast (n.roll)
lines(x = time[1401:1886], y = rowMeans(forc2@forecast$sigmaFor)+0.2, col="blue")
## Examine forc1@forecast
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=abs(yret)[1401:1886], type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con il valore atteso di |z|")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
#### 2) ex-post, h = 1:H at t = 1400
forc2 <- ugarchforecast(fitORspec = spec1x, n.ahead = H,
data = yret, out.sample = NROW(yret) - 1400, n.roll = 3)
## Examine forc2@forecast (n.roll)
lines(x = time[1401:1886], y = rowMeans(forc2@forecast$sigmaFor)+0.001, col="blue")
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=abs(yret)[1401:1886], type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con il valore atteso di |z|")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
#### 2) ex-post, h = 1:H at t = 1400
forc2 <- ugarchforecast(fitORspec = spec1x, n.ahead = H,
data = yret, out.sample = NROW(yret) - 1400, n.roll = 3)
## Examine forc2@forecast (n.roll)
lines(x = time[1401:1886], y = rowMeans(forc2@forecast$sigmaFor)+0.01, col="blue")
par(mfrow = c(1,1), lwd = 1)
plot(x=time[1401:1886], y=abs(yret)[1401:1886], type="l",
ylab="E|z|", xlab="", main="confronto previsioni ex-post \n con il valore atteso di |z|")
lines(x = time[1401:1886], y = forc1@forecast$sigmaFor, col="red")
#### 2) ex-post, h = 1:H at t = 1400
forc2 <- ugarchforecast(fitORspec = spec1x, n.ahead = H,
data = yret, out.sample = NROW(yret) - 1400, n.roll = 3)
## Examine forc2@forecast (n.roll)
lines(x = time[1401:1886], y = rowMeans(forc2@forecast$sigmaFor)+0.1, col="blue")
#### INSTALLA E CARICA LIBRERIE NECESSARIE  E SCRIPTS
#install.packages("forecast")
library(ggplot2)
library(forecast)
library(lmtest)       ## For better model print
library(tsoutliers)   ## For outliers
library(urca)         ## For UR tests
library(FinTS)        ## For ArchTest (from RForge)
source("/home/leonardo/Documenti/UNIFI/2022-2023/secondo_semestre/statistica economica/R/TSA-Useful-Functions.R")
source("/home/leonardo/Documenti/UNIFI/2022-2023/secondo_semestre/statistica economica/R/CalendarEffects-Student-Functions.R")
source("/home/leonardo/Documenti/UNIFI/2022-2023/secondo_semestre/statistica economica/R/TSA-Predict-Student-Functions.R")
#### settings
main <- "Precipitazioni"
#### LEGGI I DATI
df <- read.csv("~/Documenti/UNIFI/2022-2023/secondo_semestre/statistica economica/Report/Bitto/precipitazioni_calenzano.csv", header = TRUE)
#### CREA DATE COME OGGETTO DATA
df$Date <- as.Date(x = df$Date, format = "%d/%m/%Y")
start <- as.numeric( c( format(df$Date[1], "%Y"), format(df$Date[1], "%m"), format(df$Date[1], "%d")) )
y <- df$Precipitation
y <- ts(data=y, start=start, frequency = 365)
### se si associa la variabile y con una trasformazione di df$precipitazioni
### allora possiamo rifare i test in modo semplice su una trasformazione
y <- sqrt(y)
#y <- log(y + 1)
#### ANALISI PRELIMINARE
ggplot( data = df, aes( Date, Precipitation )) +
geom_line() +
scale_x_date(date_labels = "%Y %b %d", date_breaks = "3 month") +
theme(axis.text.x=element_text(angle=60, hjust=1)) +
ylab(label = "Precipitazioni [mm]") +
xlab(label = "") +
ggtitle("Precipitazioni giornaliere a Calenzano")
par(mfrow = c(2,1))
Acf(x = y, type = "correlation", na.action = na.pass, lag.max = 400, main="Auto-correlation")
Acf(x = y, type = "partial",     na.action = na.pass, lag.max = 400, main="Partial auto-correlation")
#### ANALISI UNIT ROOT (DF/ADF TEST)
### Cell 4
##   (DGP:   RW + drift;
##    Model: AR(1) + trend (+ other possible stationary terms))
# i lags indicano quanti termini della parte augmented
# quindi avendo lags=0 si fa un DF se sono più di zero allora
# è un ADF
adf.1 <- ur.df(y = y, type = "trend", lags = 24, selectlags = "AIC")
cat("\n-----\nTest1: ADF with trend\n")
print( adf.1@teststat )
print( adf.1@cval )
##   Outcome:tau3 => R; phi2 => R; phi3 => R
### COMMENT : incredibilmente il test evidenzia il fatto che in realtà il processo
### è apparentemente stazionario in quanto tutti e tre i test sono stati rifiutati
### ovvero si ha che non ci sono radici unitarie....
## di conseguenza abbiamo che D=d=0
#### SPECIFICAZIONE ARIMA
################################################################################
## ARIMA(p,d,q)x(P,D,Q)_S modeling
################################################################################
####
# ARIMA(1,0,1)x(1,0,1) con costante    con NaN
# ARIMA(1,0,1)x(1,0,1) senza costante con NaN
# ARIMA(1,0,0)x(1,0,1) con costante   AIC=2987.49   AICc=2987.56   BIC=3011.56
# ARIMA(1,0,0)x(1,0,1) senza costante AIC=3057.28   AICc=3057.33   BIC=3076.53
# ARIMA(0,0,1)x(1,0,1) con costante   con NaN
# ARIMA(0,0,1)x(1,0,1) senza costante con NaN
# ARIMA(2,0,2)x(1,0,1) con costante   AIC=2987.99   AICc=2988.15   BIC=3026.49
# ARIMA(2,0,2)x(1,0,1) senza costante AIC=2993.47   AICc=2993.59   BIC=3027.16
# ARIMA(2,0,1)x(1,0,1) con costante   AIC=2985.92   AICc=2986.04   BIC=3019.61
# ARIMA(2,0,1)x(1,0,1) senza costante AIC=2989.44   AICc=2989.54   BIC=3018.32
# ARIMA(2,0,0)x(1,0,1) con costante   AIC=2988.1   AICc=2988.2   BIC=3016.98
# ARIMA(2,0,0)x(1,0,1) senza costante AIC=2991.16   AICc=2991.22   BIC=3015.22
# ARIMA(2,0,1) con costante   AIC=2982   AICc=2982.07   BIC=3006.07 <-
#### STIMA ARIMA (no external regressors)
xreg <- NULL
fit <- Arima(y = y,
order = c(2, 0, 1), seasonal = list(order = c(0, 0, 0)),
xreg = xreg, include.constant = TRUE)
print(summary(fit))
print(lmtest::coeftest(fit))
#### Root analysis
par(mfrow = c(1,1))
root <- .arma.roots(fit = fit)
.circle(win = 2.5)
points(root$root$ar, col = "red")
points(root$root$ma, col = "blue")
################################################################################
## Diagnostics
################################################################################
#### Useful quantities
npar1  <- NROW(fit$coef)                            ## Number of parameters
lag1   <- npar1 + c(1, 2, 5, 8, 13, 17, 22, 46, 96, 196)
res1   <- residuals(fit)                            ## Residuals
resst1 <- ( res1 - mean(res1) ) / sqrt(fit$sigma2)  ## Standardized residuals
x1 <- res1
main <- "Residui"
#### Ts plot, acf, pacf, Ljung-Box of residuals
df$residui <- res1
ggplot( data = df, aes(Date, residui)) +
geom_line() +
scale_x_date(date_labels = "%Y %b %d", date_breaks = "3 month") +
theme(axis.text.x=element_text(angle=60, hjust=1)) +
ylab(label = main) +
xlab(label = "")
par(mfrow = c(2,1))
Acf(x = x1, type = "correlation", lag.max = 400, na.action = na.pass, main = main)
Acf(x = x1, type = "partial",     lag.max = 400, na.action = na.pass, main = main)
# lb <- Box.test(x = res1, lag = 10, type = "Ljung-Box", fitdf = NROW(fit$coef))
cat("\n", paste("Ljung-Box of", main, "at different lags\n") )
lb <- mapply(FUN = Box.test, lag = lag1,
MoreArgs = list(x = x1, type = "Ljung-Box", fitdf = npar1))[1:3, , drop = FALSE]
print(rbind(lag = lag1, lb))
#### Ts plot, acf of residuals^2
par(mfrow = c(3,1))
main <- "residuals^2"
x1 <- res1^2
plot(x1, type = "l", main = main, ylab = "")
Acf(x = x1, type = "correlation", lag.max = 60, na.action = na.pass, main = main)
Acf(x = x1, type = "partial",     lag.max = 60, na.action = na.pass, main = main)
#### Ts plot, acf of |residuals|
par(mfrow = c(3,1))
main <- "|residuals|"
x1 <- abs(res1)
plot(x1, type = "l", main = main, ylab = "")
Acf(x = x1, type = "correlation", lag.max = 60, na.action = na.pass, main = main)
Acf(x = x1, type = "partial",     lag.max = 60, na.action = na.pass, main = main)
#### Another diagnostic: the ARCH test
cat("\n-----------------------------------------------------------------
ARCH test \n")
lag <- c(1, 2, 3, 6, 12, 24, 48, 96)
at <- mapply(FUN = ArchTest, lags = lag,
MoreArgs = list(x = x1, demean = TRUE))
print(rbind(lag = lag, at[1:3,]))
#### Comment: mild heterosk. detected only by ACF(|res|); transforming data by
##   sqrt() or log() produces even worse results.
#### Unconditional distribution of residuals
## Plot
par(mfrow = c(1,2))
hist(x = resst1, breaks = 25, freq = FALSE, main = "Residui", xlab = "", ylab="Densità")
x1 <- seq(from = min(resst1), to = max(resst1)+1, length.out = 100)
lines(x = x1, y = dnorm(x = x1, mean = 0, sd = 1), col = "red")
qqnorm(y = resst1, main = "Q-Q Plot",
xlab = "Quantità teoriche", ylab = "Quantili del campione",
plot.it = TRUE)
abline(a = 0, b = 1, col = "red")
## Test of normality
cat("\nTest of normality\n")
print( shapiro.test(x = res1 ) )
################################################################################
## Forecasts
################################################################################
################################
## Ex-post forecasts: all made 1-step ahead
################################
#### Settings
J  <- 120                                              ## How many ex-post forecast to compute
H  <- 1                                               ## Forecasting horizon
t1 <- .predict.t1(nobs = NROW(y), J = J, n.ahead = H) ## 1st obs in the ex-post period (needed below)
#### No external regressors
pred1.1 <- .predict(object = fit, n.ahead = H, t = t1, y = y,
fixed.n.ahead = TRUE)
#### Naive
predn.1 <- .predict.naive(fit = fit, J = J, n.ahead = H,
g = "sqrt"
)
#### Conversion of predictions to the original scale (if needed) and computation of bands
x1 <- .pred.bands(pred = pred1.1, alpha = 0.15,
g = "sqrt"
)
#### Error Measures
em1.1  <- .ErrorMeasures(y = y, fit = x1$mean, naive = predn.1)
emn.1  <- .ErrorMeasures(y = y, fit = predn.1, naive = predn.1)
## Print
ErrorMeas <- data.frame(
model = c("Arima", "Naive"),
h = H,
rbind( em1.1, emn.1, deparse.level = 0 ) )
print( ErrorMeas )
#### Plot
##NROW(y) è il numero di osservazioni, nel nostro caso sono 910
#ind  <- (NROW(y) - J + 1) : NROW(y) ## To extract last data from y
## ind è un vettore di posizioni
ind <- (NROW(y)- J + 1 ): NROW(y)
par(mfrow = c(1,1))
ylim <- range(
x1$lower, x1$upper, predn.1
)
## time è un vettore di date
time <- df$Date[ind]
plot(x = time, y = y[ind], ylim = ylim,
main = "(Ex-post) previsioni dei 120 giorni passati", xlab = "tempo", ylab = "[mm]",
type="l", )
lines(x = time, y = x1$mean,  col = "red")
lines(x = time, y = x1$lower,  col = "purple")
lines(x = time, y = x1$upper,  col = "orange")
lines(x = time, y = predn.1,  col = "green", lty = "solid")
################################
## Ex-ante (genuine) forecasts: from 1 to H steps ahead
################################
#### Settings
H  <- 365      ## Forecasting horizon
t1 <- NROW(y) ## Last obs in the info set
time1 <- .extend.time(x = df$Date, n.ahead = H, by = "day")
#### No external regressors
newxreg <- NULL
pred1 <- .predict(object = fit, n.ahead = H, t = t1, y = y, xreg = newxreg,
fixed.n.ahead = FALSE)
pred1
predn <- .predict.naive(fit = fit, J = H, n.ahead = H,
g = "sqrt"
)
#### Bands e riportare i valori all'originale
x1 <- .pred.bands(pred = pred1, alpha = 0.15,
g = "sqrt"
)
#### Print
print( cbind(t = x1$t, pred1 = x1$mean, naive = predn) )
#### Plot
par(mfrow = c(1,1))
ylim <- range(
x1$lower, x1$upper, predn.1 )
time <- time1
plot(x = time, y = x1$mean, type = "l",
main = "(Ex-ante) previsioni per i prossimi 365 giorni", xlab = "time", ylab = "[mm]",
ylim = ylim, col="red", )
lines(x = time, y = x1$lower,  col = "purple")
lines(x = time, y = x1$upper,  col = "orange")
lines(x = time, y = predn, col = "green")
pred1
sqrt(fit$sigma2)
# Calcola l'ACF della colonna "residui"
acf_result <- acf(df$residui, plot = TRUE)
df
# Leggi il file CSV
df <- read_csv(file_path)
# Calcola l'ACF della colonna "residui"
acf_result <- acf(df$residui, plot = TRUE)
# Stampa il risultato
print(acf_result)
# Carica il pacchetto per la manipolazione dei dati
library(dplyr)
# Carica il pacchetto per la lettura dei file CSV
library(readr)
# Carica il pacchetto per l'analisi delle serie temporali
library(forecast)
# Imposta il percorso del file CSV
file_path <- "./data/residui.csv"
# Leggi il file CSV
df <- read_csv(file_path)
# Carica il pacchetto per la manipolazione dei dati
library(dplyr)
# Carica il pacchetto per la lettura dei file CSV
library(readr)
# Carica il pacchetto per l'analisi delle serie temporali
library(forecast)
# Imposta il percorso del file CSV
file_path <- "home/leonardo/Documenti/UNIFI/LAUREA/MATERIALE/hive/data/residui.csv"
# Leggi il file CSV
df <- read_csv(file_path)
# Leggi il file CSV
df <- read_csv(file_path)
setwd("~/Documenti/UNIFI/LAUREA/MATERIALE/hive/data")
# Calcola l'ACF della colonna "residui"
acf_result <- acf(df$residui, plot = TRUE)
df
df$residui
# Leggi il file CSV
df <- read_csv(file_path,header=TRUE)
# Carica il pacchetto per la manipolazione dei dati
library(dplyr)
# Carica il pacchetto per la lettura dei file CSV
library(readr)
# Carica il pacchetto per l'analisi delle serie temporali
library(forecast)
# Imposta il percorso del file CSV
file_path <- "/home/leonardo/Documenti/UNIFI/LAUREA/MATERIALE/hive/data/residui.csv"
# Leggi il file CSV
df <- read_csv(file_path)
View(df)
df
View(df)
df$residui
# Calcola l'ACF della colonna "residui"
acf_result <- acf(df$residui, plot = TRUE)
# Stampa il risultato
print(acf_result)
